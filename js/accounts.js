import { auth, db } from "./firebase-config.js";

import { getUserProfile } from "./auth.js";

function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

function getAccountTypeIcon(type) {
  const icons = {
    cash: "fas fa-money-bill-wave",

    bank: "fas fa-university",

    savings: "fas fa-piggy-bank",

    credit: "fas fa-credit-card",

    asset: "fas fa-gem",
  };

  return icons[type] || "fas fa-wallet";
}

function updateUserProfile(userProfile) {
  const userName = document.getElementById("userName");

  const userAvatar = document.getElementById("userAvatar");

  if (userName) {
    userName.textContent = userProfile?.name || "User";
  }

  if (userAvatar) {
    userAvatar.src =
      userProfile?.avatar ||
      `https://ui-avatars.com/api/?name=${encodeURIComponent(
        userProfile?.name || "User"
      )}&background=random`;

    userAvatar.alt = `${userProfile?.name || "User"}'s avatar`;
  }
}

class AccountManager {
  constructor(userId) {
    this.userId = userId;

    this.accountsRef = db.ref(`users/${userId}/accounts`);
  }

  async createAccount(accountData) {
    try {
      const newAccountRef = this.accountsRef.push();

      await newAccountRef.set({
        ...accountData,

        createdAt: new Date().toISOString(),

        updatedAt: new Date().toISOString(),
      });

      return newAccountRef.key;
    } catch (error) {
      console.error("Error creating account:", error);

      throw error;
    }
  }

  async updateAccount(accountId, accountData) {
    try {
      await this.accountsRef.child(accountId).update({
        ...accountData,

        updatedAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error("Error updating account:", error);

      throw error;
    }
  }

  async deleteAccount(accountId) {
    try {
      await this.accountsRef.child(accountId).remove();
    } catch (error) {
      console.error("Error deleting account:", error);

      throw error;
    }
  }

  async getAccounts() {
    try {
      const snapshot = await this.accountsRef.once("value");

      const accounts = snapshot.val() || {};

      return Object.entries(accounts).map(([id, data]) => ({
        id,

        ...data,
      }));
    } catch (error) {
      console.error("Error fetching accounts:", error);

      throw error;
    }
  }

  subscribeToAccounts(callback) {
    this.accountsRef.on("value", (snapshot) => {
      const accounts = snapshot.val() || {};

      const accountsList = Object.entries(accounts).map(([id, data]) => ({
        id,

        ...data,
      }));

      callback(accountsList);
    });
  }

  async getAccountTotals() {
    try {
      const accounts = await this.getAccounts();

      return accounts.reduce((totals, account) => {
        const { type, balance, currency } = account;

        // Combine bank and savings accounts under the same total

        const groupType = type === "savings" ? "bank" : type;

        if (!totals[groupType]) totals[groupType] = {};

        if (!totals[groupType][currency]) totals[groupType][currency] = 0;

        totals[groupType][currency] += parseFloat(balance);

        return totals;
      }, {});
    } catch (error) {
      console.error("Error calculating totals:", error);

      throw error;
    }
  }

  async getNetWorthFromIndex() {
    try {
      const netWorthRef = db.ref(`users/${this.userId}/netWorth`);

      const snapshot = await netWorthRef.once("value");

      return snapshot.val() || 0;
    } catch (error) {
      console.error("Error fetching net worth:", error);

      throw error;
    }
  }

  async checkBalanceDiscrepancy() {
    try {
      const netWorth = await this.getNetWorthFromIndex();

      const accounts = await this.getAccounts();

      const totalBalance = accounts.reduce((sum, account) => {
        const balance = this.convertToMAD(account.balance, account.currency);

        return sum + balance;
      }, 0);

      const difference = netWorth - totalBalance;

      return {
        hasDiscrepancy: Math.abs(difference) > 0.01,

        difference,

        netWorth,

        totalBalance,
      };
    } catch (error) {
      console.error("Error checking balance discrepancy:", error);

      throw error;
    }
  }

  convertToMAD(amount, fromCurrency) {
    const rates = {
      MAD: 1,

      USD: 10.05,

      EUR: 11.02,
    };

    return amount * (rates[fromCurrency] || 1);
  }

  async updateNetWorth(newAmount) {
    try {
      await db.ref(`users/${this.userId}/netWorth`).set(newAmount);
    } catch (error) {
      console.error("Error updating net worth:", error);

      throw error;
    }
  }

  async checkAndDisplayDiscrepancy() {
    try {
      const discrepancy = await this.checkBalanceDiscrepancy();

      const alertElement = document.getElementById("reconciliationAlert");

      if (!alertElement) {
        console.warn("Reconciliation alert element not found");

        return;
      }

      if (discrepancy.hasDiscrepancy) {
        const formattedDifference = formatCurrency(
          Math.abs(discrepancy.difference)
        ).replace(/[+-]/, "");

        const alertMessage = alertElement.querySelector(".alert-message p");

        if (alertMessage) {
          if (discrepancy.difference > 0) {
            alertMessage.innerHTML = `Your Net Worth (${formatCurrency(
              discrepancy.netWorth
            ).replace(
              "+",

              ""
            )}) is <span class="positive">${formattedDifference}</span> more than your total account balance (${formatCurrency(
              discrepancy.totalBalance
            ).replace(
              "+",

              ""
            )}).<br>You might have forgotten to add some accounts.`;
          } else {
            alertMessage.innerHTML = `Your Net Worth (${formatCurrency(
              discrepancy.netWorth
            ).replace(
              "+",

              ""
            )}) is <span class="negative">${formattedDifference}</span> less than your total account balance (${formatCurrency(
              discrepancy.totalBalance
            ).replace("+", "")}).<br>You might need to update your net worth.`;
          }
        }

        alertElement.style.display = "block";
      } else {
        alertElement.style.display = "none";
      }
    } catch (error) {
      console.error("Error displaying discrepancy:", error);
    }
  }
}

let accountManager = null;

firebase.auth().onAuthStateChanged(async (user) => {
  if (user) {
    await initializePage(user);
  } else {
    window.location.href = "/login.html";
  }
});

async function initializePage(user) {
  try {
    accountManager = new AccountManager(user.uid);

    initializeModal();

    accountManager.subscribeToAccounts(async (accounts) => {
      await renderAccounts(accounts);

      await accountManager.checkAndDisplayDiscrepancy();
    });

    await accountManager.checkAndDisplayDiscrepancy();

    const userProfile = await getUserProfile(user.uid);

    updateUserProfile(userProfile);
  } catch (error) {
    console.error("Error initializing page:", error);
  }
}

async function renderAccounts(accounts) {
  const accountsByType = {
    cash: [],

    bank: [],

    savings: [],

    credit: [],

    asset: [],
  };

  // Categorize accounts

  accounts.forEach((account) => {
    if (accountsByType.hasOwnProperty(account.type)) {
      accountsByType[account.type].push(account);
    }
  });

  // Calculate total balance

  const totalBalance = accounts.reduce((sum, account) => {
    return sum + parseFloat(account.balance);
  }, 0);

  document.getElementById("totalBalance").textContent =
    formatCurrency(totalBalance);

  // Update Bank & Savings section

  const bankTotal = accountsByType.bank.reduce(
    (sum, account) => sum + parseFloat(account.balance),

    0
  );

  const savingsTotal = accountsByType.savings.reduce(
    (sum, account) => sum + parseFloat(account.balance),

    0
  );

  const combinedTotal = bankTotal + savingsTotal;

  // Update the bank section header to show both totals

  const bankHeader = document.querySelector("#bankAccounts .group-header");

  bankHeader.innerHTML = `



    <h3><i class="fas fa-university"></i> Bank & Savings</h3>



    <div class="group-totals">



      <div class="total-breakdown">



        <span class="breakdown-item">Bank: ${formatCurrency(bankTotal)}</span>



        <span class="breakdown-item">Savings: ${formatCurrency(
          savingsTotal
        )}</span>



      </div>



      <span class="group-total" id="bankTotal">${formatCurrency(
        combinedTotal
      )}</span>



    </div>



  `;

  // Render accounts by type

  const renderAccountsByType = (type, subtype = null) => {
    const listElement = document.getElementById(`${type}AccountsList`);

    if (!listElement) return;

    listElement.innerHTML = "";

    accountsByType[type].forEach((account) => {
      listElement.appendChild(createAccountElement(account, subtype));
    });
  };

  // Render bank accounts

  const bankAccountsList = document.getElementById("bankAccountsList");

  bankAccountsList.innerHTML = "";

  accountsByType.bank.forEach((account) => {
    bankAccountsList.appendChild(createAccountElement(account, "Bank"));
  });

  accountsByType.savings.forEach((account) => {
    bankAccountsList.appendChild(createAccountElement(account, "Savings"));
  });

  // Render other account types

  renderAccountsByType("cash");

  renderAccountsByType("credit");

  renderAccountsByType("asset");
}

function createAccountElement(account, subtype = null) {
  const accountElement = document.createElement("div");

  accountElement.className = "account-item";

  accountElement.innerHTML = `



        <div class="account-info">

          <div class="account-icon">

            <i class="${getAccountTypeIcon(account.type)}"></i>

          </div>

          <div class="account-details">

            <span class="account-name">${account.name}</span>

        <span class="account-type">${
          subtype || capitalizeFirstLetter(account.type)
        }</span>



          </div>

        </div>

    <div class="account-balance">



      <span class="balance-amount">${formatCurrency(account.balance)}</span>



      <span class="balance-currency">${account.currency}</span>



    </div>



        <div class="account-actions">

      <button class="edit-account-btn" title="Edit Account">



            <i class="fas fa-edit"></i>

          </button>

      <button class="delete-account-btn" title="Delete Account">



            <i class="fas fa-trash-alt"></i>

          </button>

        </div>

  `;

  // Add event listeners for edit and delete buttons

  accountElement

    .querySelector(".edit-account-btn")

    .addEventListener("click", () => {
      handleEditAccount(account.id);
    });

  accountElement

    .querySelector(".delete-account-btn")

    .addEventListener("click", () => {
      handleDeleteAccount(account.id);
    });

  return accountElement;
}

window.handleEditAccount = async (accountId) => {
  try {
    const accounts = await accountManager.getAccounts();

    const account = accounts.find((acc) => acc.id === accountId);

    if (!account) return;

    const modal = document.getElementById("accountModal");

    const form = document.getElementById("accountForm");

    const modalTitle = document.getElementById("modalTitle");

    modalTitle.textContent = "Edit Account";

    form.accountName.value = account.name;

    form.accountType.value = account.type;

    form.initialBalance.value = account.balance;

    form.currency.value = account.currency;

    form.dataset.accountId = accountId;

    modal.classList.add("active");
  } catch (error) {
    console.error("Error editing account:", error);

    Swal.fire({
      title: "Error",

      text: "Failed to load account details",

      icon: "error",
    });
  }
};

window.handleDeleteAccount = async (accountId) => {
  try {
    const result = await Swal.fire({
      title: "Are you sure?",

      text: "This action cannot be undone",

      icon: "warning",

      showCancelButton: true,

      confirmButtonColor: "#dc3545",

      confirmButtonText: "Yes, delete it!",
    });

    if (result.isConfirmed) {
      await accountManager.deleteAccount(accountId);

      Swal.fire({
        title: "Deleted!",

        text: "Account has been deleted.",

        icon: "success",

        timer: 2000,

        showConfirmButton: false,
      });
    }
  } catch (error) {
    console.error("Error deleting account:", error);

    Swal.fire({
      title: "Error",

      text: "Failed to delete account",

      icon: "error",
    });
  }
};

function formatCurrency(amount, currency = "MAD") {
  return (
    new Intl.NumberFormat("ar-MA", {
      style: "decimal",

      minimumFractionDigits: 2,

      maximumFractionDigits: 2,
    }).format(amount) + ` ${currency}`
  );
}

document.getElementById("signOutBtn")?.addEventListener("click", () => {
  auth

    .signOut()

    .then(() => {
      window.location.href = "/login.html";
    })

    .catch((error) => {
      console.error("Error signing out:", error);
    });
});

document

  .getElementById("reconcileButton")

  ?.addEventListener("click", async () => {
    try {
      const discrepancy = await accountManager.checkBalanceDiscrepancy();

      const result = await Swal.fire({
        title: "Balance Discrepancy Details",

        html: `































































































































































































































































































































































































































































































































        <div class="reconcile-details">































































































































































































































































































































































































































































































































          <p>Net Worth: ${formatCurrency(discrepancy.netWorth).replace(
            "+",

            ""
          )}</p>































































































































































































































































































































































































































































































































          <p>Total Account Balance: ${formatCurrency(
            discrepancy.totalBalance
          ).replace("+", "")}</p>































































































































































































































































































































































































































































































































          <p class="${discrepancy.difference > 0 ? "positive" : "negative"}">































































































































































































































































































































































































































































































































            Difference: ${formatCurrency(
              Math.abs(discrepancy.difference)
            ).replace("+", "")}































































































































































































































































































































































































































































































































          </p>





























































































































































































































































































































































































































































































































          <p class="reconcile-hint">































































































































































































































































































































































































































































































































            ${
              discrepancy.difference > 0
                ? "Your net worth is higher than your total account balance. You might have forgotten to add some accounts."
                : "Your total account balance exceeds your net worth. You might need to update your net worth."
            }































































































































































































































































































































































































































































































































          </p>















































































































































































































































































































































































































































































































































































































































        </div>































































































































































































































































































































































































































































































































      `,

        showCancelButton: true,

        confirmButtonText:
          discrepancy.difference > 0
            ? "Add Missing Account"
            : "Update Net Worth",

        cancelButtonText: "Cancel",
      });

      if (result.isConfirmed) {
        if (discrepancy.difference > 0) {
          document.getElementById("accountModal").classList.add("active");

          document.getElementById("initialBalance").value =
            discrepancy.difference;
        } else {
          await accountManager.updateNetWorth(discrepancy.totalBalance);

          document.getElementById("reconciliationAlert").style.display = "none";

          Swal.fire({
            title: "Success",

            text: "Net worth has been updated to match your total account balance",

            icon: "success",

            timer: 2000,

            showConfirmButton: false,
          });
        }
      }
    } catch (error) {
      console.error("Error reconciling balance:", error);

      Swal.fire({
        title: "Error",

        text: "Failed to reconcile balance",

        icon: "error",
      });
    }
  });

async function handleAccountSubmit(e) {
  e.preventDefault();

  const form = e.target;

  const accountId = form.dataset.accountId;

  const accountData = {
    name: form.accountName.value,

    type: form.accountType.value,

    balance: parseFloat(form.initialBalance.value),

    currency: form.currency.value,
  };

  try {
    if (accountId) {
      await accountManager.updateAccount(accountId, accountData);
    } else {
      await accountManager.createAccount(accountData);
    }

    const modal = document.getElementById("accountModal");

    modal.classList.remove("active");

    form.reset();

    delete form.dataset.accountId;

    document.getElementById("modalTitle").textContent = "New Account";

    await accountManager.checkAndDisplayDiscrepancy();

    Swal.fire({
      title: "Success",

      text: `Account ${accountId ? "updated" : "created"} successfully`,

      icon: "success",

      timer: 2000,

      showConfirmButton: false,
    });
  } catch (error) {
    console.error("Error saving account:", error);

    Swal.fire({
      title: "Error",

      text: `Failed to ${accountId ? "update" : "create"} account`,

      icon: "error",
    });
  }
}

function initializeModal() {
  const modal = document.getElementById("accountModal");

  const newAccountBtn = document.getElementById("newAccountBtn");

  const cancelBtn = document.getElementById("cancelAccount");

  const accountForm = document.getElementById("accountForm");

  newAccountBtn.addEventListener("click", () => {
    modal.classList.add("active");
  });

  cancelBtn.addEventListener("click", () => {
    modal.classList.remove("active");

    accountForm.reset();
  });

  accountForm.addEventListener("submit", handleAccountSubmit);
}

async function handleEditAccount(accountId) {
  try {
    const accounts = await accountManager.getAccounts();

    const account = accounts.find((acc) => acc.id === accountId);

    if (!account) return;

    const modal = document.getElementById("accountModal");

    const form = document.getElementById("accountForm");

    const modalTitle = document.getElementById("modalTitle");

    modalTitle.textContent = "Edit Account";

    form.accountName.value = account.name;

    form.accountType.value = account.type;

    form.initialBalance.value = account.balance;

    form.currency.value = account.currency;

    form.dataset.accountId = accountId;

    modal.classList.add("active");
  } catch (error) {
    console.error("Error editing account:", error);

    Swal.fire({
      title: "Error",

      text: "Failed to load account details",

      icon: "error",
    });
  }
}

async function handleDeleteAccount(accountId) {
  try {
    const result = await Swal.fire({
      title: "Are you sure?",

      text: "This action cannot be undone",

      icon: "warning",

      showCancelButton: true,

      confirmButtonColor: "#dc3545",

      confirmButtonText: "Yes, delete it!",
    });

    if (result.isConfirmed) {
      await accountManager.deleteAccount(accountId);

      Swal.fire("Deleted!", "Account has been deleted.", "success");
    }
  } catch (error) {
    console.error("Error deleting account:", error);

    Swal.fire({
      title: "Error",

      text: "Failed to delete account",

      icon: "error",
    });
  }
}

async function distributeExcessAmount(excessAmount) {
  try {
    const accounts = await accountManager.getAccounts();

    if (accounts.length === 0) return;

    const amountPerAccount = excessAmount / accounts.length;

    await Promise.all(
      accounts.map((account) => {
        const newBalance = parseFloat(account.balance) + amountPerAccount;

        return accountManager.updateAccount(account.id, {
          ...account,

          balance: newBalance,
        });
      })
    );
  } catch (error) {
    console.error("Error distributing excess amount:", error);

    throw error;
  }
}
